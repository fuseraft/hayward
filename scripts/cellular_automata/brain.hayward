global.min_grid_size = 20

fn main(args: list)
  grid_size = get_grid_size(args)

  exit print_help() when grid_size == null

  rows = grid_size
  cols = grid_size

  grid = [[0] * cols] * rows
  initialize(grid, rows, cols)
  
  while true do
    display(grid, rows, cols)
    grid = update(grid, rows, cols);
;

fn get_grid_size(args: list)
  var (grid_size = null)

  try
    grid_size = args.get(0).to_integer()  

    if grid_size < global.min_grid_size
      grid_size = null;
  ;
  
  return grid_size;

fn print_help()
  println "usage: hayward brain <int_grid_size>";

/#
Initializes cells to either 0 (off), 1 (on), or 2 (dying)
#/
fn initialize(grid: list, rows: integer, cols: integer)
  for x in [0 .. rows - 1] do
    for y in [0 .. cols - 1] do
      grid[x][y] = math::random(0, 2);
  ;
;

fn display(grid: list, rows: integer, cols: integer)
  console::clear()
  len = rows - 1
  changed = false

  repeat len as i do
    row = [""] * cols

    for cell, j in grid[i - 1] do
      if cell == 0
        row.set(j, " ")
      elsif cell == 1
        row.set(j, "O")
        changed = true
      else
        row.set(j, "*")
        changed = true;
    ;

    println row.join(" ");

  if !changed
    # initialize(grid, rows, cols)
    exit;
;

fn update(grid: list, rows: integer, cols: integer): list
  var (new_grid: list = grid.clone(),
       x_range: list = [0 .. rows - 1],
       y_range: list = [0 .. cols - 1])
  
  for x in x_range do
    for y in y_range do
      current_state = grid[x][y]
      on_neighbors = count_on_neighbors(grid, rows, cols, x, y)

      if current_state == 0 && on_neighbors == 2
        new_grid[x][y] = 1  # off to on
      elsif current_state == 1
        new_grid[x][y] = 2  # on to dying
      else
        new_grid[x][y] = 0; # dying to off
    ;
  ;

  return new_grid;

fn count_on_neighbors(grid: list, rows: integer, cols: integer, x: integer, y: integer): integer
  var (directions: list = [
          [x - 1, y - 1],
          [x - 1, y],
          [x - 1, y + 1],
          [x, y - 1],
          [x, y + 1],
          [x + 1, y - 1],
          [x + 1, y],
          [x + 1, y + 1]
        ],
       nx: integer,
       ny: integer,
       res: integer)

  for direction in directions do
    nx = direction[0], ny = direction[1]
    if (nx >= 0 && nx < rows && ny >= 0 && ny < cols)
      if grid[nx][ny] == 1
        res += 1;
    ;
  ;

  return res;

main(env::argv().keys())
