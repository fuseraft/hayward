/#
# Where the magic happens.
#/
fn main()
  # define the `SBag` and `NBag` structures.
  define_bag_structs()

  # instantiate one of each kind of bag
  sbag = SBag.new("hello world")
  nbag = NBag.new()

  # while the `SBag` string is not empty, print it (invoking `SBag.to_string()`), then remove the first character.
  while not sbag.get_s().empty() do
    println sbag
    sbag.set_s(sbag.get_s()[1:])
  end

  # while the `NBag` integer is less than 10, print it (invoking `NBag.to_string()`), then add 1.
  while nbag.get_n() < 10 do
    println nbag
    nbag.set_n(nbag.get_n() + 1)
  end

  println "The end!"
end

/#
# Defines two kinds of structures, `SBag` and `NBag`, which contain a single string or integer, respectively.
#/
fn define_bag_structs()
  println "Defining an SBag..."

  /#
  # Represents a bag containing a single string.
  # Defaults to an empty string.
  #/
  struct SBag
    # Constructor with an optional parameter `s` (defaults `@s` to an empty string).
    fn new(s: string = "")
      @s = s
    end

    # Returns a string representation of an `SBag` instance (the value of `@s`).
    fn to_string()
      return "${@s}"
    end
    
    # Gets the value of `@s`.
    fn get_s()
      return @s
    end
    
    # Sets `@s` to the value of `s`.
    fn set_s(s: string = "")
      @s = s
    end
  end

  println "Defining an NBag..."

  /#
  # Represents a bag containing a single integer.
  # Defaults to 0.
  #/
  struct NBag
    # Constructor with an optional parameter `n` (defaults `@n` to 0).
    fn new(n: integer = 0)
      @n = n
    end

    # Returns a string representation of an `NBag` instance (the value of `@n`).
    fn to_string()
      return "${@n}"
    end
    
    # Gets the value of `@n`.
    fn get_n()
      return @n
    end
    
    # Sets `@n` to the value of `n`.
    fn set_n(n: integer = 0)
      @n = n
    end
  end
end

main()