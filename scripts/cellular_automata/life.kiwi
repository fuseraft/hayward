fn main(args)
  grid_size = get_grid_size(args)

  if grid_size == null
    exit print_help()
  end

  rows = grid_size
  cols = grid_size

  var (grid: list = [[0] * cols] * rows)

  randomize(grid, rows, cols)
  
  var (last_res: string)

  while true do
    var (res: string = display(grid, rows))
  
    println res

    if res != last_res
      grid = update(grid, rows, cols)
    else
      exit
    end

    last_res = res.clone()
  end
end

fn print_help()
  println "usage: hayward life <integer_grid_size>"
end

fn get_grid_size(args: list)
  grid_size = null

  if args.empty()
    return null
  end

  try
    grid_size = args[0].to_integer()
    grid_size = [grid_size, 20].max()
  end

  return grid_size
end

fn randomize(grid: list, rows: integer, cols: integer)
  for x in [0 to cols - 1] do
    for y in [0 to rows - 1] do
      grid[x][y] = math::random(0, 1)
    end
  end
end

fn display(grid: list, rows: integer): string
  console::clear()

  var (len: integer = rows - 1,
       disp: list = [0] * len)

  repeat len as i do
    disp.set(i - 1, grid[i - 1].join(" "))
  end

  return disp.join("\n").replace("0", " ").replace("1", "O")
end

fn count_neighbors(grid: list, rows: integer, cols: integer, x: integer, y: integer): integer
  directions = [
    [x - 1, y - 1],
    [x - 1, y],
    [x - 1, y + 1],
    [x, y - 1],
    [x, y + 1],
    [x + 1, y - 1],
    [x + 1, y],
    [x + 1, y + 1]
  ]

  res = 0
  nx = null
  ny = null

  for direction in directions do
    nx = direction[0], ny = direction[1]
    if nx >= 0 && nx < rows && ny >= 0 && ny < cols
      res += grid[nx][ny]
    end
  end

  return res
end

fn update(grid: list, rows: integer, cols: integer): list
  new_grid = grid.clone()

  for x in [0 to cols - 1] do
    for y in [0 to rows - 1] do
      live_neighbors = count_neighbors(grid, rows, cols, x, y)

      if grid[x][y] == 1 && (live_neighbors == 2 || live_neighbors == 3)
        new_grid[x][y] = 1
      elsif grid[x][y] == 0 && live_neighbors == 3
        new_grid[x][y] = 1
      else
        new_grid[x][y] = 0
      end
    end
  end

  return new_grid
end

main(env::argv().keys())